<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--  SQL문들은 <mapper>와 </mapper>사이에 해당 문장 유형의 요소를 사용하여 정의함 -->
<!-- mapper 요소의 namespace 속성에는 매퍼 인터페이스의 패키지 이름이 포함된 전체이름을 설정함 -->

<mapper namespace="com.spring5218.mypro00.mapper.MyBoardMapper">
   
   
   <!-- AND bDelfalg = 0 삭제 요청 할려면 작성 , 그냥 전부다 볼꺼면 주석-->
   <!-- 게시물 목록조회 --><!--
    <select id="selectMyBoardList" resultType="com.spring.mypro00.domain.MyBoardVO">
      SELECT * FROM book_ex.tbl_myboard
      WHERE bno > 0    AND bDelfalg = 0
      ORDER BY bno DESC
   </select> -->
   
   <!-- 게시물 목록조회- 목록2 : 페이징 고려 : 삭제 요청된 행 제외하려면 INNER SELECT WHERE에  "bno > 0 AND bdelFlag = 0 AND"  포함 해주면됨--><!--
       <select id="selectMyBoardList" resultType="com.spring.mypro00.domain.MyBoardVO">
      <![CDATA[
            SELECT bno, btitle, bcontent, bwriter, bregdate, bmodDate, bviewsCnt, breplyCnt, bdelFlag
            FROM (SELECT /*+ INDEX_DESC(a pk_myboard) */ ROWNUM rn, a.* 
                      FROM book_ex.tbl_myboard a 
                      WHERE ROWNUM <= (#{pageNum} * #{rowAmountPerPage})
                      )
                WHERE rn >= (( #{pageNum} * #{rowAmountPerPage}) - (#{rowAmountPerPage} - 1) )
             ]]>
       </select> -->
   
      <!-- 게시물 목록조회- 목록2 : 페이징 고려 : 삭제 요청된 행 제외하려면 INNER SELECT WHERE에  "bno > 0 AND bdelFlag = 0 AND"  포함 해주면됨
             pdf 172p 잘읽어봐!! -->
      <select id="selectMyBoardList" resultType="com.spring5218.mypro00.domain.MyBoardVO">
      <![CDATA[
            SELECT bno, btitle, bcontent, bwriter, bregdate, bmodDate, bviewsCnt, breplyCnt, bdelFlag
            FROM (SELECT /*+ INDEX_DESC(a PK_MYBIARD) */ ROWNUM rn, a.* 
                      FROM book_ex.tbl_myboard a 
                      WHERE 
           ]]>
           <trim prefix="(" suffix=") AND" prefixOverrides="OR">
                  <foreach item='scope' collection="scopeArray">
                     <trim prefix="OR">
                        <choose>
                           <when test="scope == 'T'.toString()">btitle LIKE '%'||#{keyword}||'%'</when>
                           <when test="scope == 'C'.toString()">bcontent LIKE '%'||#{keyword}||'%'</when>
                           <when test="scope == 'W'.toString()">bwriter LIKE '%'||#{keyword}||'%'</when>
                        </choose>
                     </trim>
                  </foreach>
              </trim>
              <![CDATA[
                      ROWNUM <= (#{pageNum} * #{rowAmountPerPage})
                      )
                WHERE rn >= (( #{pageNum} * #{rowAmountPerPage}) - (#{rowAmountPerPage} - 1) )
             ]]>
       </select>
       
       <!-- 게시물 총 개수 조회(페이징) : 삭제 요청된 행 포함 -->
       <select id="selectRowAmountTotal" resultType="long">
             SELECT count(*) totalcnt FROM book_ex.tbl_myboard    
             
          <where>
             <trim prefix="(" suffix=")" prefixOverrides="OR">
                <foreach item='scope' collection="scopeArray">
                   <trim prefix="OR">
                      <choose>
                         <when test="scope == 'T'.toString()">btitle LIKE '%'||#{keyword}||'%'</when>
                         <when test="scope == 'C'.toString()">bcontent LIKE '%'||#{keyword}||'%'</when>
                         <when test="scope == 'W'.toString()">bwriter LIKE '%'||#{keyword}||'%'</when>
                      </choose>
                   </trim>
                </foreach>
             </trim>
          </where>   
       </select>
   
   
   
    <!-- 게시물 등록1 - selectKey 이용 안함 -->
    <!-- CDATA로 적어야 문장을 그대로 작성할 수 있었따 (옛날) -->
    <!-- 인터페이스 메서드를 사용하기 때문에  parameterType 타입이 필요없다. -->
    <!--  하지만 DAO를 사용할 떄는  parameterType 있어야한다. -->
   <insert id="insertMyBoard">
         INSERT INTO book_ex.tbl_myboard
         VALUES (seq_myboard.nextval, #{btitle}, #{bcontent}, #{bwriter},
                      DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT)
   </insert>
   
   
<!-- 게시물 등록2 - selectKey 이용(시퀀스 이용) -->
<!-- order="BEFORE"  insert문 전에 할꺼야 , AFTER는 insert문 후에 할꺼야 -->
<!-- keyProperty = "bno" 는 필드이름 -->
   <insert id="insertMyBoardSelectKey">
      <selectKey keyProperty="bno" order="BEFORE" resultType="long">
         SELECT book_ex.seq_myboard.nextval FROM dual
      </selectKey>
          INSERT INTO book_ex.tbl_myboard
          VALUES (#{bno},#{btitle},#{bcontent}, #{bwriter},
                       DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT)
   </insert>
   
   
<!-- 특정 게시물 조회 (bno을 가져온다)  -->   
   <select id="selectMyBoard" resultType="com.spring5218.mypro00.domain.MyBoardVO">
      SELECT * FROM book_ex.tbl_myboard
      WHERE bno = #{bno} 
   </select>
   
      
<!--  특정 게시물 수정 -->
<!-- AND bdelFlgr ? -->
   <update id="updeateMyBoard">
      UPDATE book_ex.tbl_myboard
      SET btitle = #{btitle},
            bcontent = #{bcontent},
            bmodDate = DEFAULT
       WHERE bno=#{bno}
   </update>
   
   
<!-- 게시물 조회 증가 -->   
   <update id="updateBviewsCnt">
         UPDATE book_ex.tbl_myboard
         SET bviewsCnt = bviewsCnt + 1
         WHERE bno = #{bno}
   </update>
   

<!-- 게시물 삭제 요청 - bdelFlag 컬럼값이 0->1로 수정됨 -->
   <update id="updateBdelFlag">
      UPDATE book_ex.tbl_myboard
      SET bdelFlag = 1
      WHERE bno=#{bno}
   </update>
   
   
<!-- 게시물삭제 - 실제특정게시물이 삭제됨 -->
   <delete id="deleteMyBoard">
      DELETE book_ex.tbl_myboard 
      WHERE bno=#{bno}
   </delete>
   
      
<!-- 게시물 삭제 - 삭제요청된 게시물들 전체 삭제 (관리자) -->
   <delete id="deleteAllBoardSetDeleted">
      DELETE book_ex.tbl_myboard 
      WHERE bdelFlag = 1
   </delete>
   
   
 <!-- 게시물의 댓글 개수 수정: 댓글 추가 시에 #{amount}에 1, 댓글삭제 시 #{amount}에 -1이 각각 전달됨  -->
 	
 	<update id="updateBReplyCnt">
 		UPDATE book_ex.tbl_myboard
 		SET breplyCnt = breplyCnt + #{amount}
 		WHERE bno = #{bno} AND bdelFlag = 0
 	</update>
   
   
</mapper>